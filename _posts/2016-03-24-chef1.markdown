---
layout: post
title:  "chef  tutorial"
date:   2016-03-24 10:00:00 +0100
categories: chef
---

Original post series was done by this guy
http://www.jeeatwork.com/?p=102

inside of the chef tutorials.


So plan is basically following:

* create basic cookbook
  * [holding the knife](#hold_knife)
  * [creating cookbook](#create_cookbook)
* apply cookbook to local linux


* create docker recipe for provisioning

* apply cookbook to docker

* create vagrant recipe for provisioning

* apply cookbook to vagrant

* crate vagrant recipe for ec2

* apply cookbookt to ec2

##  <a name="hold_knife"></a>Holding the knife

Let's create our big project folder, make it [Chef tutorial git repo](https://github.com/mungobungo/cheftutorial.git) and create cookbooks folder where we will store all our cookbooks

```shell
mkdir big_chef
cd big_chef
git init
mkdir cookbooks
cd cookbooks
```

## <a name="create_cookbook"> </a> Creating cookbook
Now we can create cookbook. this is done via

```shell
knife cookbook create cheftutorial -o .
```

after this we go to [cheftutorial\recipes](https://github.com/mungobungo/cheftutorial/tree/master/recipes)
and create file [welcome.rb](https://github.com/mungobungo/cheftutorial/blob/master/recipes/welcome.rb)

```ruby
log "Hello #{ENV['USER']}" do
  level :info
end
```

and after that you can apply this recipe locally on windows or linux. Which you prefer the most.

here how it looks on linux box

```shell
vagrant@vagrant-VirtualBox:~/cheftutorial/recipes$ chef-apply welcome.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * log[Hello vagrant] action write


```

and here's snaphost of windows output

```powershell
C:\Users\otaykalo\projects\bigchef\cheftutorial> chef-apply .\recipes\welcom.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * log[Hello otaykalo] action write

```

looks pretty similar, which is nice.

So now we can go further. To share information between recipes whe can use *attributes*

attributes are stored in files indide [attributes directory](https://github.com/mungobungo/cheftutorial/tree/master/attributes)  
Pretty logical also

Let's see what can we do with it.

adding new attribute to new file [defautl.rb](https://github.com/mungobungo/cheftutorial/blob/master/attributes/default.rb)

```ruby
default["cheftutorial"]["name"] = "babagalamaga"

```

and use it from [welcome.rb recipe](https://github.com/mungobungo/cheftutorial/blob/master/recipes/welcome.rb)

```ruby
log "Hello #{ENV['USER']}" do
  level :info
end

log "And attribute is also here #{node['cheftutorial']['name']}" do
   level :info
end

```

now if you try it to run in old way, you'll get an error

```shell
chef-apply recipes/welcome.rb
[2016-03-24T10:58:31+01:00] FATAL: Stacktrace dumped to /home/vagrant/.chef/cache/chef-stacktrace.out
[2016-03-24T10:58:31+01:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report
[2016-03-24T10:58:31+01:00] FATAL: NoMethodError: undefined method `[]' for nil:NilClass

```

This happens because we're trying to run chef in plain _one-and-only-recipy-mode_ and it doesn't know anything about attributes. Because they live in different folder and all that.

So how can we fix it?

first of all, lets get back to our root bigchef folder

```shell
cd ~/bigchef
```

and run

```shell
chef-client --local-mode --runlist "recipe[cheftutorial::welcome]"
```


Output should be something like this

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::welcome]"
[2016-03-24T11:06:40+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::welcome"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 2 resources
Recipe: cheftutorial::welcome
  * log[Hello vagrant] action write

  * log[And attribute is also here babagalamaga] action write


Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 02 seconds

```

so far so good. But what if we want to run several recipes at once?

Well, let's try

crating new recipe [hello.rb](https://github.com/mungobungo/cheftutorial/blob/master/recipes/hello.rb) at [cheftutorial/recipes](https://github.com/mungobungo/cheftutorial/tree/master/recipes) folder

```ruby
log "Hello guy someghing #{node['cheftutorial']['name']}" do
   level :info
end

```

and run chef-apply again from root folder of the project (*not* cheftutorial folder)

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "cheftutorial::welcome,cheftutorial::hello"
```

as you can see, you can specify as many recipes as you want. this is why it is called runLIST.

```shell
[2016-03-24T11:28:30+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::welcome", "cheftutorial::hello"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 3 resources
Recipe: cheftutorial::welcome
  * log[Hello vagrant] action write

  * log[And attribute is also here babagalamaga] action write

Recipe: cheftutorial::hello
  * log[Hello guy someghing babagalamaga] action write


Running handlers:
Running handlers complete
Chef Client finished, 3/3 resources updated in 02 seconds

```

Next chapter.  When using chef and or provisioning something you need to create config files.
Or html pages. or something like that. doing it by hands is kinda stupid. this is why chef has tempaltes.
So let's have fun.

Chef uses [Embedded RuBy templates (ERB)](http://www.stuartellis.eu/articles/erb/))

something similar to asp.net templates.

Templates are stored in... yeah. [templates folder](https://github.com/mungobungo/cheftutorial/tree/master/templates)
here how it look sometghing like template.rb

```ruby
<ul>
<% 3.times do %>
  <li>list item</li>
<% end %>
</ul>
```

if you run

```shell
ruby template.rb
```

You should see following output

```html
<ul>

  <li>list item</li>

  <li>list item</li>

  <li>list item</li>

</ul>

```

let's say we want to generate config file in specified folder with ip of the machine it is run on.
First we need to create template and put it to [templates folder](https://github.com/mungobungo/cheftutorial/tree/master/templates).
something like [app.config.erb](https://github.com/mungobungo/cheftutorial/blob/master/templates/app.config.erb)

```ruby
<connectionStrings>
	<metadata name="recipeName" value = "<%= node['recipes'][0] %>" />
	<ipaddress value = "<%= node['ipaddress'] %>" />
	<nodename value = "<%= node['fqdn'] %>" />
</connectionStrings>
```

When we have created template, we can use it in our recipes. Something like that

File [config.rb](https://github.com/mungobungo/cheftutorial/blob/master/recipes/config.rb) in [_recipes_ folder](https://github.com/mungobungo/cheftutorial/tree/master/recipes)

```ruby
template "/tmp/app.config" do
  source "app.config.erb"
  mode '0440'
end
```

the code basically says that recipe will create file located in "/tmp/app.config" and populate with data generated by our template.

Everything seems to be ready, so let's launch

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config]"
[2016-03-24T14:16:50+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::config
  * template[/tmp/app.config] action create
    - create new file /tmp/app.config
    - update content in file /tmp/app.config from none to eb679c
    --- /tmp/app.config	2016-03-24 14:16:53.061374999 +0100
    +++ /tmp/.app.config20160324-6738-he6cw5	2016-03-24 14:16:53.061374999 +0100
    @@ -1 +1,7 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config" />
    +	<ipaddress value = "10.0.2.15" />
    +	<nodename value = "vagrant-VirtualBox" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds
```

Polite chef even shows the content of newly generated file. But let's do double check.

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ cat /tmp/app.config
<connectionStrings>
	<metadata name="recipeName" value = "cheftutorial::config" />
	<ipaddress value = "10.0.2.15" />
	<nodename value = "vagrant-VirtualBox" />
</connectionStrings>

```

yep. It is alive. know what? i'm happy

the next logical question comes to my mind now - can we use attributes in our templates, the same way we do it in recipes?  

Creating new template and recipe to check that

Our new template file [app.attribute.config.erb](https://github.com/mungobungo/cheftutorial/blob/master/templates/app.attribute.config.erb)

looks like this. take a look at *fromAttribute* field. this one uses user-defined attribute we've just created.

```ruby
<connectionStrings>
	<metadata name="recipeName" value = "<%= node['recipes'][0] %>" />
	<ipaddress value = "<%= node['ipaddress'] %>" />
	<nodename value = "<%= node['fqdn'] %>" />
	<fromAttribute value = "<%= node['cheftutorial']['name']%>" />
</connectionStrings>

```

and our file [config-attribute.rb](https://github.com/mungobungo/cheftutorial/blob/master/recipes/config-attribute.rb)

that uses that template with attribute in it

```ruby
template "/tmp/app-attribute.config" do
  source "app.attribute.config.erb"
  mode '0440'
end
```

running it...

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config-attribute]"
[2016-03-24T14:35:06+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config-attribute"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::config-attribute
  * template[/tmp/app-attribute.config] action create
    - create new file /tmp/app-attribute.config
    - update content in file /tmp/app-attribute.config from none to edbfd2
    --- /tmp/app-attribute.config	2016-03-24 14:35:09.389374999 +0100
    +++ /tmp/.app-attribute.config20160324-7089-82ocga	2016-03-24 14:35:09.389374999 +0100
    @@ -1 +1,8 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config-attribute" />
    +	<ipaddress value = "10.0.2.15" />
    +	<nodename value = "vagrant-VirtualBox" />
    +	<fromAttribute value = "babagalamaga" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds
```

Haleluia , now we know how to mix recipes, attributes and templates.

but, i don't really like that templates know about attributes. So, what can we do to inject dependencies?
And reduce amount of work if we need to update attributes, or rename them or run use different attributes with the same template? Is there a was?
For sure. variables to the rescue.

our third approach to attributed templates.

our template [app.variables.config.erb](https://github.com/mungobungo/cheftutorial/blob/master/templates/app.variables.config.erb) :

```ruby
<connectionStrings>
        <metadata name="recipeName" value = "<%= @recipe %>" />
        <ipaddress value = "<%= @ipaddress %>" />
        <nodename value = "<%= @fqdn %>" />
        <fromAttribute value = "<%= @name%>" />
</connectionStrings>

```

and we can use it in recipes.
Lets create two files with from the same template, but with different variables

[confg-variables.rb recipe](https://github.com/mungobungo/cheftutorial/blob/master/recipes/config-variables.rb)

```ruby
template "/tmp/app-variable1.config" do
  source "app.varialble.config.erb"
  variables({
    :recipe => node['recipes'][0],
    :ip => node['ipaddress'],
    :fqdn => node['fqdn'],
    :name => node['cheftutorial']['name']
  })
  mode '0440'
end

template "/tmp/app-variable2.config" do
  source "app.varialble.config.erb"
  variables({
    :recipe => "nothing",
    :ip => "middle.of.nowhere",
    :fqdn => "inception.here",
    :name => "No_name.inc"
  })
  mode '0440'
end

```

Launching ...

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config-variables]"
[2016-03-24T15:09:19+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config-variables"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 2 resources
Recipe: cheftutorial::config-variables
  * template[/tmp/app-variable1.config] action create
    - create new file /tmp/app-variable1.config
    - update content in file /tmp/app-variable1.config from none to 6c09ee
    --- /tmp/app-variable1.config	2016-03-24 15:09:22.173374999 +0100
    +++ /tmp/.app-variable1.config20160324-8444-1ds6rqr	2016-03-24 15:09:22.173374999 +0100
    @@ -1 +1,8 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config-variables" />
    +	<ipaddress value = "" />
    +	<nodename value = "vagrant-VirtualBox" />
    +	<fromAttribute value = "babagalamaga" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'
  * template[/tmp/app-variable2.config] action create
    - create new file /tmp/app-variable2.config
    - update content in file /tmp/app-variable2.config from none to 56e534
    --- /tmp/app-variable2.config	2016-03-24 15:09:22.197374999 +0100
    +++ /tmp/.app-variable2.config20160324-8444-hip4e0	2016-03-24 15:09:22.197374999 +0100
    @@ -1 +1,8 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "nothing" />
    +	<ipaddress value = "" />
    +	<nodename value = "inception.here" />
    +	<fromAttribute value = "No_name.inc" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 02 seconds
```

Coool.

But still, what if we want to use several templates that depends on each other? like header and other components?
well, here we go.


Let´s pretend we want all our confing file have some copyright info in the header
So, here´s header template and we call it.. well, [header.rb](https://github.com/mungobungo/cheftutorial/blob/master/templates/header.erb)

```ruby
<header value = "<%= @info %>" />
```

and another template [app.headed.config.erb](https://github.com/mungobungo/cheftutorial/blob/master/templates/app.headed.config.erb) , we incude header using render directive. see the first line of the example

```ruby
<%= render "header.erb" %>

<connectionStrings>
	<metadata name="recipeName" value = "<%= @recipe %>" />
	<ipaddress value = "<%= @ipaddress %>" />
	<nodename value = "<%= @fqdn %>" />
	<fromAttribute value = "<%= @name%>" />
</connectionStrings>

```

recipe for using it should be pretty obvious, just don't forget about _info_ variable we need to inject for header template to work properly.

[config-headed.rb recipe](https://github.com/mungobungo/cheftutorial/blob/master/recipes/config-headed.rb)

```ruby
template "/tmp/app-headed1.config" do
  source "app.headed.config.erb"
  variables({
    :recipe => node['recipes'][0],
    :ip => node['ipaddress'],
    :fqdn => node['fqdn'],
    :name => node['cheftutorial']['name'],
    :info => "header info"
  })
  mode '0440'
end

template "/tmp/app-headed2.config" do
  source "app.headed.config.erb"
  variables({
    :recipe => "nothing",
    :ip => "middle.of.nowhere",
    :fqdn => "inception.here",
    :name => "No_name.inc",
    :info => "and so it goes.."
  })
  mode '0440'
end
```


And running example

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config-headed]"
[2016-03-24T15:44:18+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config-headed"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 2 resources
Recipe: cheftutorial::config-headed
  * template[/tmp/app-headed1.config] action create
    - create new file /tmp/app-headed1.config
    - update content in file /tmp/app-headed1.config from none to c8af11
    --- /tmp/app-headed1.config	2016-03-24 15:44:20.757374999 +0100
    +++ /tmp/.app-headed1.config20160324-8792-1pvmbr	2016-03-24 15:44:20.757374999 +0100
    @@ -1 +1,10 @@
    + <header value = "header info" />
    +
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config-headed" />
    +	<ipaddress value = "" />
    +	<nodename value = "vagrant-VirtualBox" />
    +	<fromAttribute value = "babagalamaga" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'
  * template[/tmp/app-headed2.config] action create
    - create new file /tmp/app-headed2.config
    - update content in file /tmp/app-headed2.config from none to 4dffa0
    --- /tmp/app-headed2.config	2016-03-24 15:44:20.777374999 +0100
    +++ /tmp/.app-headed2.config20160324-8792-1iwbbl4	2016-03-24 15:44:20.777374999 +0100
    @@ -1 +1,10 @@
    + <header value = "and so it goes.." />
    +
    +<connectionStrings>
    +	<metadata name="recipeName" value = "nothing" />
    +	<ipaddress value = "" />
    +	<nodename value = "inception.here" />
    +	<fromAttribute value = "No_name.inc" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 02 seconds
```

See ? we've added header, and not just header, but header that can also have some variables.

I think this is more then enough for now so we will leave templates and attributes and start moving to things called files...

quick recap:

* recipes are like programs or modules or functions that can get stuff done

* attributes are like metadata variables, for stuff you want share between recipes and do not want to hardcode

* templates are like, well, templates. it can be used in recipes to generate fiels based on that templates.

* best practice is not to use attributes directly from templates. let the recipes to inject proper values to the template



Some more we need to add here is files and guess what. yes. definitions.

files are simple. Those are just templates but without parameters. simple goold old files.

files are created in files folder of cookbook. easy to remember heh..

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef/cookbooks/cheftutorial/files$ cat file.txt
```

gives us

```shell
and we put something to the file direclty
```

and we can use it following way

[file-creation.rb recipe](https://github.com/mungobungo/cheftutorial/blob/master/recipes/file-creation.rb)

```ruby
cookbook_file "file.txt" do
  path "/tmp/file.txt"
  mode "644"
  action :create
end
```

and ouput will be like this

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::file-creation]"
[2016-03-24T16:35:18+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::file-creation"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::file-creation
  * cookbook_file[file.txt] action create
    - create new file /tmp/file.txt
    - update content in file /tmp/file.txt from none to bf2b7d
    --- /tmp/file.txt	2016-03-24 16:35:21.013374999 +0100
    +++ /tmp/.file.txt20160324-9125-4pt5ob	2016-03-24 16:35:21.013374999 +0100
    @@ -1 +1,3 @@
    +and we put something to the file direclty
    +
    - change mode from '' to '0644'

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds

```


> if we're doing cross-platform solutions, we might need to have different configs for different platforms.
It can be done using following attribute

```ruby
node['platform']
```

>when executed it can show 'windows' or 'ubuntu' or 'fedora' or whatever is considered as a platform


#creating _definitions_

Now we know a lot. but how those commands are really implemented under the hood?
how that *log* or *cookbook_file* works?

to find it out we need to implement something ourselves.

here we are defining createfile definition. Basically you can think about it as of macro or just function that can be used inside of recipes.
you can pass parameters there and use them inside of the definition

Definitions are stored, as you can already guess in [definitions folder](https://github.com/mungobungo/cheftutorial/blob/master/definitions/)

We will add our own [file-definition.rb definition](https://github.com/mungobungo/cheftutorial/blob/master/definitions/file-definition.rb)

```ruby
define :createfile, :path => nil, :content => nil do
  file "#{params[:path]}" do
    content "#{params[:content]}"
  end
end
```

Now we can use our own definition in our own recipes.
just like a (Bosch)[https://en.wikipedia.org/wiki/The_Garden_of_Earthly_Delights]. see how parameters are passed to definition

[file-def.rb recipe](https://github.com/mungobungo/cheftutorial/blob/master/recipes/file-def.rb)

```ruby
createfile "/tmp/definitonfile.txt" do
   path "/tmp/definitonfile.txt"
   content "Created using definitions"
end
```

If you think you see code duplication here, you're wrong.
filename and path are configured in parameter _path_ and that string that goes afer _createfile_ is just name of the step.

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::file-def]"
[2016-03-24T16:51:51+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::file-def"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::file-def
  * file[/tmp/definitonfile.txt] action create
    - create new file /tmp/definitonfile.txt
    - update content in file /tmp/definitonfile.txt from none to 934744
    --- /tmp/definitonfile.txt	2016-03-24 16:51:54.073374999 +0100
    +++ /tmp/.definitonfile.txt20160324-9408-1kof23b	2016-03-24 16:51:54.073374999 +0100
    @@ -1 +1,2 @@
    +Created using definitions

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds
```


# Berks.

Used to more easy work with cookbook dependencies.

mostly stolen from [here](http://www.jeeatwork.com/?p=108)

let's create new cookbook called [bertut](https://github.com/mungobungo/bertut.git)

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef/cookbooks$ knife cookbook create bertut -o .
WARNING: No knife configuration file found
** Creating cookbook bertut in /home/vagrant/projects/big_chef/cookbooks
** Creating README for cookbook: bertut
** Creating CHANGELOG for cookbook: bertut
** Creating metadata for cookbook: bertut
```

and make

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef/cookbooks/bertut$ berks init
      create  Berksfile
      create  Thorfile
      create  chefignore
      create  .gitignore
      create  Gemfile
      create  .kitchen.yml
    conflict  chefignore
Overwrite /home/vagrant/projects/big_chef/cookbooks/bertut/chefignore? (enter "h" for help) [Ynaqdh] y
       force  chefignore
      append  Thorfile
      create  test/integration/default
      append  .gitignore
      append  .gitignore
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
      create  Vagrantfile
Successfully initialized
```

afteward we need to remove .git folder, because our bertut is already under source control of bigger project

```shell
rm -fr .git
```

let's add dependency to other cookbook from the supermarket.

for that open [Berksfile](https://github.com/mungobungo/bertut/blob/master/Berksfile) and add cookbook dependency,  our good fellow from  previous execrices


```ruby
source "https://supermarket.chef.io"

metadata

cookbook 'cheftutorial', git: 'https://github.com/mungobungo/cheftutorial.git'
```

and patch [metadata.rb](https://github.com/mungobungo/bertut/blob/master/metadata.rb) file with dependency

```ruby
name             'bertut'
maintainer       'YOUR_COMPANY_NAME'
maintainer_email 'YOUR_EMAIL'
license          'All rights reserved'
description      'Installs/Configures bertut'
long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version          '0.1.0'

depends 'cheftutorial'
```


this is how you can use recipes from other cookbooks (inside [default.rb](https://github.com/mungobungo/bertut/blob/master/recipes/default.rb) or any other recipe)

```ruby
include_recipe "cheftutorial::config-headed"
```

after that we should run

```shell
berks install
```

that will download all referenced cookbooks to local folder of 'bertut' book

'berks install' should be run in root folder of 'bertut' cookbook

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef/cookbooks/bertut$ berks install
Resolving cookbook dependencies...
Fetching 'bertut' from source at .
Fetching 'cheftutorial' from https://github.com/mungobungo/cheftutorial.git (at master)
Fetching cookbook index from https://supermarket.chef.io...
Using bertut (0.1.0) from source at .
Using cheftutorial (0.1.0) from https://github.com/mungobungo/cheftutorial.git (at master)
```

now comes tricky stuff. we cannot test anymore the way we did before..
so.
(this can be also automated via chef)

* create folder for testing

```shell
mkdir -p /tmp/berks/cookbooks
```

* populate test folder with all the cookbooks and their dependencies

```shell
vagrant@vagrant-VirtualBox:~/projects/big_chef/cookbooks/bertut$ berks vendor /tmp/berks/cookbooks
Resolving cookbook dependencies...
Fetching 'bertut' from source at .
Using bertut (0.1.0) from source at .
Using cheftutorial (0.1.0) from https://github.com/mungobungo/cheftutorial.git (at master)
Vendoring bertut (0.1.0) to /tmp/berks/cookbooks/bertut
Vendoring cheftutorial (0.1.0) to /tmp/berks/cookbooks/cheftutorial

```


* create file client.rb in test folder

```ruby
root = File.absolute_path(File.dirname(__FILE__))

berks_cookbook_path = root + 'cookbooks'
cookbook_path = berks_cookbook_path
```


4) run the recipe

```shell
vagrant@vagrant-VirtualBox:/tmp/berks$ chef-client -c $PWD/client.rb --local-mode --runlist "recipe[bertut::default]"
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["bertut::default"]
Synchronizing Cookbooks:
  - bertut (0.1.0)
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 2 resources
Recipe: cheftutorial::config-headed
  * template[/tmp/app-headed1.config] action create
    - create new file /tmp/app-headed1.config
    - update content in file /tmp/app-headed1.config from none to 8e5f98
    --- /tmp/app-headed1.config	2016-03-24 18:23:11.835253999 +0100
    +++ /tmp/.app-headed1.config20160324-10812-151uxy7	2016-03-24 18:23:11.835253999 +0100
    @@ -1 +1,10 @@
    + <header value = "header info" />
    +
    +<connectionStrings>
    +	<metadata name="recipeName" value = "bertut::default" />
    +	<ipaddress value = "" />
    +	<nodename value = "vagrant-VirtualBox" />
    +	<fromAttribute value = "babagalamaga" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'
  * template[/tmp/app-headed2.config] action create
    - create new file /tmp/app-headed2.config
    - update content in file /tmp/app-headed2.config from none to 4dffa0
    --- /tmp/app-headed2.config	2016-03-24 18:23:11.847253999 +0100
    +++ /tmp/.app-headed2.config20160324-10812-194bdwu	2016-03-24 18:23:11.847253999 +0100
    @@ -1 +1,10 @@
    + <header value = "and so it goes.." />
    +
    +<connectionStrings>
    +	<metadata name="recipeName" value = "nothing" />
    +	<ipaddress value = "" />
    +	<nodename value = "inception.here" />
    +	<fromAttribute value = "No_name.inc" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 02 seconds
```

also, references to other cookbooks could be also added to Berksfile

```ruby
cookbook 'memcached'
cookbook 'nginx'
```

those books would be taken from [Chef Supermarket](https://supermarket.chef.io/)

For example, you can install PostgreSql server to Ubuntu just using this simple recipe

```ruby
include_recipe postgresql::server
```

It will install the postgresql server packages and sets up the service. Also it will

* generates a strong default password (via openssl) for postgres

* set the password for postgres

* manage the postgresql.conf file.

* manage the pg_hba.conf file.

Kinda nice for a single line of code heh. )
