---
layout: post
title:  "chef  tutorial"
date:   2016-03-24 10:00:00 +0100
categories: chef
---

Original post series was done by this guy
http://www.jeeatwork.com/?p=102

inside of the chef tutorials.


So plan is basically following:c
# create basic cookbook
# apply cookbook to local linux
# create docker recipe for provisioning
# apply cookbook to docker
# create vagrant recipe for provisioning
# apply cookbook to vagrant
# crate vagrant recipe for ec2
# apply cookbookt to ec2


lets create our big project folder, make it git repo and create cookbooks folder where we will store all our cookbooks

```
mkdir big_chef
cd big_chef
git init
mkdir cookbooks
cd cookbooks
```

now we can  create cookbook. this is done via

```
knife cookbook create cheftutorial -o .
```

after this we go to cheftutorial\recipes
and create file welcome.rb

```
log "Hello #{ENV['USER']}" do
  level :info
end
```

and after that you can apply this recipe locally on windows or linux. Which you prefer the most.

here how it looks on linux box

```
vagrant@vagrant-VirtualBox:~/cheftutorial/recipes$ chef-apply welcome.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * log[Hello vagrant] action write


```

and here's snaphost of windows output

```
C:\Users\otaykalo\projects\bigchef\cheftutorial> chef-apply .\recipes\welcom.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * log[Hello otaykalo] action write

```

looks pretty similar, which is nice.

So now we can go further. To share information between recipes whe can use *attributes*

attributes are stored in files indide _attributes_ directory. Pretty logical also

Let's see what can we do with it.

adding new attribute to new file defautl.rb

```
default["cheftutorial"]["name"] = "babagalamaga"

```

and use it from welcome message

```
log "Hello #{ENV['USER']}" do
  level :info
end

log "And attribute is also here #{node['cheftutorial']['name']}" do
   level :info
end

```

now if you try it to run in old way, youll get an error

```
chef-apply recipes/welcome.rb
[2016-03-24T10:58:31+01:00] FATAL: Stacktrace dumped to /home/vagrant/.chef/cache/chef-stacktrace.out
[2016-03-24T10:58:31+01:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report
[2016-03-24T10:58:31+01:00] FATAL: NoMethodError: undefined method `[]' for nil:NilClass

```

This happens because we're trying to run chef in plain _one-and-only-recipy-mode_ and it doesn't know anything about attributes. Because they live in different folder and all that.

So how can we fix it?

first of all, lets get back to ourt root bigchef folder

```
cd ~/bigchef
```

and run

```
chef-client --local-mode --runlist "recipe[cheftutorial::welcome]"

```


Output should be something like this

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::welcome]"
[2016-03-24T11:06:40+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::welcome"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 2 resources
Recipe: cheftutorial::welcome
  * log[Hello vagrant] action write

  * log[And attribute is also here babagalamaga] action write


Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 02 seconds

```

so far so good. But what if we want to run several recipes at once?

Well, let's try

crating new recipe hello.rb at cheftutorial/recipes folder

```
log "Hello guy someghing #{node['cheftutorial']['name']}" do
   level :info
end

```

and run chef-apply again from root folder of the project (*not* cheftutorial folder)

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "cheftutorial::welcome,cheftutorial::hello"
```

as you can see, you can specify as many recipes as you want. this is why it is called runLIST.

```
[2016-03-24T11:28:30+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::welcome", "cheftutorial::hello"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 3 resources
Recipe: cheftutorial::welcome
  * log[Hello vagrant] action write

  * log[And attribute is also here babagalamaga] action write

Recipe: cheftutorial::hello
  * log[Hello guy someghing babagalamaga] action write


Running handlers:
Running handlers complete
Chef Client finished, 3/3 resources updated in 02 seconds

```

Next chapter.  When using chef and or provisioning something you need to create config files.
Or html pages. or something like that. doing it by hands is kinda stupid. this is why chef has tempaltes.
So let's have fun.

Chef uses EMbedded ruby templates (ERB)

something similar to asp.net templates.

here how it look like template.rb

```
<ul>
<% 3.times do %>
  <li>list item</li>
<% end %>
</ul>
```

and now see the output

```
<ul>

  <li>list item</li>

  <li>list item</li>

  <li>list item</li>

</ul>

```

let's say we want to generate config file in specified folder with ip of the machine it is run on.
First we need to create template and put it to _templates_ folder. something like "app.config.erb"

```
<connectionStrings>
	<metadata name="recipeName" value = "<%= node['recipes'][0] %>" />
	<ipaddress value = "<%= node['ipaddress'] %>" />
	<nodename value = "<%= node['fqdn'] %>" />
</connectionStrings>
```

When we have created template, we can use it in our recipes. Something like that

(file config.rb in _recipes_ folder)

```
template "/tmp/app.config" do
  source "app.config.erb"
  mode '0440'
end
```

the code basically says that recipe will create file located in "/tmp/app.config" and populate with data generated by our template.

Everything seems to be ready, so let's launch

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config]"
[2016-03-24T14:16:50+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::config
  * template[/tmp/app.config] action create
    - create new file /tmp/app.config
    - update content in file /tmp/app.config from none to eb679c
    --- /tmp/app.config	2016-03-24 14:16:53.061374999 +0100
    +++ /tmp/.app.config20160324-6738-he6cw5	2016-03-24 14:16:53.061374999 +0100
    @@ -1 +1,7 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config" />
    +	<ipaddress value = "10.0.2.15" />
    +	<nodename value = "vagrant-VirtualBox" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds
```

Polite chef even shows the content of newly generated file. But let's do double check.

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ cat /tmp/app.config
<connectionStrings>
	<metadata name="recipeName" value = "cheftutorial::config" />
	<ipaddress value = "10.0.2.15" />
	<nodename value = "vagrant-VirtualBox" />
</connectionStrings>

```

yep. It is alive. know what? i'm happy

the next logical question comes to my mind now - can we use attributes in our templates, the same way we do it in recipes?  

Creating new template and recipe to check that

our new template file

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ cat cookbooks/cheftutorial/templates/app.attribute.config.erb
```

looks like this. take a look at *fromAttribute* field. this one uses user-defined attribute we've created.

```
<connectionStrings>
	<metadata name="recipeName" value = "<%= node['recipes'][0] %>" />
	<ipaddress value = "<%= node['ipaddress'] %>" />
	<nodename value = "<%= node['fqdn'] %>" />
	<fromAttribute value = "<%= node['cheftutorial']['name']%>" />
</connectionStrings>

```

and our file

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ cat cookbooks/cheftutorial/recipes/config-attribute.rb
```

that uses that template with attribute in it

```
template "/tmp/app-attribute.config" do
  source "app.attribute.config.erb"
  mode '0440'
end
```

running it...

```
vagrant@vagrant-VirtualBox:~/projects/big_chef$ chef-client --local-mode --runlist "recipe[cheftutorial::config-attribute]"
[2016-03-24T14:35:06+01:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: ["cheftutorial::config-attribute"]
Synchronizing Cookbooks:
  - cheftutorial (0.1.0)
Compiling Cookbooks...
Converging 1 resources
Recipe: cheftutorial::config-attribute
  * template[/tmp/app-attribute.config] action create
    - create new file /tmp/app-attribute.config
    - update content in file /tmp/app-attribute.config from none to edbfd2
    --- /tmp/app-attribute.config	2016-03-24 14:35:09.389374999 +0100
    +++ /tmp/.app-attribute.config20160324-7089-82ocga	2016-03-24 14:35:09.389374999 +0100
    @@ -1 +1,8 @@
    +<connectionStrings>
    +	<metadata name="recipeName" value = "cheftutorial::config-attribute" />
    +	<ipaddress value = "10.0.2.15" />
    +	<nodename value = "vagrant-VirtualBox" />
    +	<fromAttribute value = "babagalamaga" />
    +</connectionStrings>
    +
    - change mode from '' to '0440'

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 02 seconds
```

Haleluia , now we know how to mix recipes, attributes and templates.
